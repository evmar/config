* load elisp from my emacs dir
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp")
  (add-to-list 'load-path "~/.local/share/emacs/site-lisp")
#+END_SRC
* per-machine settings from local.el, if they exist
#+BEGIN_SRC emacs-lisp
  (load "local" t t)
#+END_SRC
* basic settings
#+BEGIN_SRC emacs-lisp
  (setq-default
   ; don't show startup screen
   inhibit-startup-screen t
   ; disable backup
   backup-inhibited t
   ; disable auto save
   auto-save-default nil

   make-backup-files nil
   create-lockfiles nil

   ; don't do all this renaming/copying jiggery-pokery when saving a file.
   file-precious-flag nil
   ; don't break hard links when editing
   backup-by-copying-when-linked nil

   indent-tabs-mode nil
   standard-indent 2
   c-basic-offset 2
   css-indent-offset 2
   css-indent-offset 2

   visible-bell 1

   require-final-newline t

   ; middle-click should paste at the point, not where I clicked.
   mouse-yank-at-point t

   ; death to fsync (really to ext3 with mode=ordered)
   write-region-inhibit-fsync t
  
   ; use normal monospace font
   font-use-system-font t

   max-specpdl-size 2000
  )

  ; no menu bar on console mode
  (menu-bar-mode -1)

  ; reduce big gray margins on window
  (fringe-mode '(1 . 0))

  ; auto-revert to on-disk file versions
  (global-auto-revert-mode 1)
  (setq-default
   auto-revert-interval 1)
  
  ; disable scroll bars
  (scroll-bar-mode -1)

  ; Don't require me to type out "yes".
  (fset 'yes-or-no-p 'y-or-n-p)

  ; Better font on Windows.
  (if (eq system-type 'windows-nt)
      (set-face-attribute 'default nil :font "Consolas-11"))

  ; It's ok to run M-x erase-buffer.
  (put 'erase-buffer 'disabled nil)


#+END_SRC
  
* global settings
** custom variables
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(column-number-mode t)
   '(erc-hide-list (quote ("JOIN" "PART" "QUIT")))
   '(erc-nick "evmar")
   '(erc-server "irc.oftc.net")
   '(erc-user-full-name "Evan Martin")
   '(evil-shift-width 2)
   '(evil-want-C-i-jump nil)
   '(haskell-program-name "ghci")
   '(ido-enable-tramp-completion nil)
   '(js-indent-level 2)
   '(org-agenda-files (quote ("~/everything.org")))
   '(paragraph-separate "[        ]*$\\|-[ ]")
   '(paragraph-start "\\|[      ]*$\\\\|-[ ]")
   '(safe-local-variable-values
     (quote
      ((flycheck-clang-language-standard . "c++14")
       (flycheck-gcc-language-standard . "c++11")
       (c-offsets-alist
        (innamespace . 0)))))
   '(show-paren-mode t)
   '(tool-bar-mode nil)
   '(uniquify-buffer-name-style (quote forward) nil (uniquify))
   '(vc-handled-backends nil)
   '(visible-bell t))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(whitespace-line ((t (:underline "red")))))
#+END_SRC

** font
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Monospace 12"))

#+END_SRC
** browser support
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program (getenv "BROWSER"))
  ;(require 'w3m-load)
  ;(setq browse-url-browser-function 'w3m-browse-url)
  
#+END_SRC
** melpa
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
  (package-initialize)

#+END_SRC
* global modes
** evil
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/evil")
  (require 'evil)
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-r") nil)
  (define-key evil-normal-state-map (kbd "C-r") nil)
  (define-key evil-normal-state-map (kbd "M-.") nil)
  (define-key evil-normal-state-map (kbd "M-,") nil)
  (add-to-list 'evil-emacs-state-modes 'comint-mode)
  (add-to-list 'evil-emacs-state-modes 'erc-mode)
  (add-to-list 'evil-emacs-state-modes 'grep-mode)
  (add-to-list 'evil-emacs-state-modes 'shell-mode)
  (add-to-list 'evil-emacs-state-modes 'tide-references-mode)
  (global-undo-tree-mode -1)
#+END_SRC
** ido, interactive buffer switch and file load
#+BEGIN_SRC emacs-lisp
  (require 'ido)
  (ido-mode t)
  ; allow ido to read large directories
  (setq ido-max-directory-size 100000)
  
#+END_SRC
  
** compilation
#+BEGIN_SRC emacs-lisp
  (setq mode-compile-always-save-buffer-p t)
  (setq compilation-scroll-output 'first-error)

  (global-set-key [f7] (lambda ()
                         (interactive)
                         (save-excursion (switch-to-buffer "*compilation*")
                                         (recompile))))
  (global-set-key (kbd "C-`") 'next-error)
#+END_SRC

** whitespace
#+BEGIN_SRC emacs-lisp
  ; Only use whitespace mode for overlong lines; its end-of-line whitespace
  ; detection is annoying.
  (require 'whitespace)
  (setq whitespace-style '(face lines-tail))
  (global-whitespace-mode 1)
#+END_SRC

** popwin hides popup windows like compilation/help automatically))))))
#+BEGIN_SRC emacs-lisp
  (require 'popwin)
  (popwin-mode 1)
  ;;(global-set-key (kbd "C-p") popwin:keymap)
#+END_SRC
** shell mode
#+BEGIN_SRC emacs-lisp
  ; Don't highlight random words in shell buffers.
  (set-variable 'shell-font-lock-keywords nil)
  (setq comint-scroll-to-bottom-on-input t)
  (setq comint-prompt-read-only t)
#+END_SRC
* programming languages
** C/C++/ObjC
#+BEGIN_SRC emacs-lisp
  (require 'google-c-style)
  (add-hook 'c-mode-common-hook 'google-set-c-style)
  (add-to-list 'auto-mode-alist '("\\.mm$" . c++-mode))
  ;; don't indent inside an 'extern "C"' block
  (c-set-offset 'inextern-lang 0)
#+END_SRC

** Golang
#+BEGIN_SRC emacs-lisp
  (require 'go-mode-load)
  (add-hook 'go-mode-hook (lambda ()
                            (set-variable 'tab-width 4 t)))
  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save)
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
  ;; (require 'inf-haskell)
  ;; (require 'haskell-mode)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
  (add-to-list 'completion-ignored-extensions ".hi")
  (add-to-list 'auto-mode-alist '("\\.cpphs$" . haskell-mode))
  (add-to-list 'auto-mode-alist '("\\.chs$" . haskell-mode))
#+END_SRC

** JavaScript
#+BEGIN_SRC emacs-lisp
  (require 'js)
  (add-to-list 'auto-mode-alist '("\\.jsx?$" . js-mode))
  (add-to-list 'auto-mode-alist '("\\.json$" . js-mode))
#+END_SRC

** lisp/scheme
#+BEGIN_SRC emacs-lisp
    (require 'paredit)
    
    (defface paren-face
      '((((class color))
         (:foreground "dark gray")))
      "Face for parens in lisp"
      :group 'faces)
    
    (defun lisp-settings ()
      (font-lock-add-keywords nil
                              '(("(\\|)" . 'paren-face)))
      (put 'match 'scheme-indent-function 1)
      (put 'match-let 'scheme-indent-function 0))
    
    (add-hook 'scheme-mode-hook 'lisp-settings)
    (add-hook 'emacs-lisp-mode-hook 'lisp-settings)
    (add-hook 'lpaca-mode-hook 'lisp-settings)
    
    (defun pjs-settings ()
      (put 'function 'scheme-indent-function 2))
    
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
  (autoload 'markdown-mode "markdown-mode.el"
     "Major mode for editing Markdown files" t)
  (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.text$" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
  
  (defun markdown-fontify-buffer-wiki-links-empty-hack () 
    "Empty replacement for `markdown-fontify-buffer-wiki-links` due to hanging bug." 
    (interactive)) 
  
  (eval-after-load "markdown-mode" 
    '(progn 
       (fset 'markdown-fontify-buffer-wiki-links 
             'markdown-fontify-buffer-wiki-links-empty-hack))) 
#+END_SRC

** Ninja
#+BEGIN_SRC emacs-lisp
  (require 'ninja-mode)
#+END_SRC

** Protobuf
#+BEGIN_SRC emacs-lisp
  (require 'protobuf-mode)
#+END_SRC

** Rust
#+BEGIN_SRC emacs-lisp
  (require 'rust-mode)
#+END_SRC

** SCons
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.scons$" . python-mode))
#+END_SRC

** SQL
#+BEGIN_SRC emacs-lisp
  (require 'sql)
#+END_SRC

** Toml
#+BEGIN_SRC emacs-lisp
  (require 'toml-mode)
#+END_SRC

** TypeScript
#+BEGIN_SRC emacs-lisp
  (require 'typescript-mode)
  (add-hook 'typescript-mode-hook
            (lambda ()
              (tide-setup)
              (flycheck-mode t)
              (setq flycheck-check-syntax-automatically '(save mode-enabled))
              (eldoc-mode t)
              (tide-hl-identifier-mode t)
              (company-mode t)
              ))
#+END_SRC
** Web (HTML/CSS/JS)
#+BEGIN_SRC emacs-lisp
  (require 'web-mode)
  (setq web-mode-script-padding 0)
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.s?css\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . web-mode))
#+END_SRC
* custom functions
** blog posts
#+BEGIN_SRC emacs-lisp
  ; Timestamp function.
  (defun timestamp ()
    "Insert a time stamp into the buffer."
    (interactive)
    (insert (format-time-string "%Y/%m/%d %H:%M" (current-time))))
  
  (defun new-post ()
    "Set up a post for lazyblog."
    (interactive)
    (insert "Timestamp: ") (timestamp) (insert "\n")
    (insert "Subject: \n")
    (insert "Summary: \n"))
  
#+END_SRC

** git
#+BEGIN_SRC emacs-lisp
  (require 'git-grep)
  
  (if (file-exists-p "~/.emacs.d/magit/50magit.el")
      (progn
        (add-to-list 'load-path "~/.emacs.d/magit")
        (require '50magit)))
#+END_SRC
** random helpers
#+BEGIN_SRC emacs-lisp
  (defun ami-summarize-indentation-at-point ()
    "Echo a summary of how one gets from the left-most column to
    POINT in terms of indentation changes."
    (interactive)
    (save-excursion
      (let ((cur-indent most-positive-fixnum)
            (trace '()))
        (while (not (bobp))
          (let ((current-line (buffer-substring (line-beginning-position)
                                                (line-end-position))))
            (when (and (not (string-match "^\\s-*$" current-line))
                       (< (current-indentation) cur-indent))
              (setq cur-indent (current-indentation))
              (setq trace (cons current-line trace))
              (if (or (string-match "^\\s-*}" current-line)
                      (string-match "^\\s-*else " current-line)
                      (string-match "^\\s-*elif " current-line))
                  (setq cur-indent (1+ cur-indent)))))
          (forward-line -1))
        (message "%s" (mapconcat 'identity trace "\n")))))
  
  ; Trim initial/trailing whitespace from a string.
  (defun trim (s)
    (replace-regexp-in-string "\n*$" "" s))
  
  (defun create-scratch-buffer nil
    "create a scratch buffer"
    (interactive)
    (switch-to-buffer (get-buffer-create "*scratch*"))
    (lisp-interaction-mode))
  
  (defun copy-file-name-to-clipboard ()
    "Copy the current buffer file name to the clipboard."
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
        (kill-new filename)
        (message "Copied buffer file name '%s' to the clipboard." filename))))
#+END_SRC
** run command line in notes
#+BEGIN_SRC emacs-lisp
  (require 'thingatpt)
  (defun bounds-of-commandline-at-point ()
    (let ((start
           (save-excursion
             (beginning-of-line)
             (point)))
          (end
           (save-excursion
             (end-of-line)
             (while (equal (preceding-char) ?\\)
               (forward-line)
               (end-of-line))
             (point))))
      (cons start end)))
  
  (put 'commandline 'bounds-of-thing-at-point
       'bounds-of-commandline-at-point)
  
  (defun shell-command-at-point ()
    (interactive)
    (let ((buffer-name "*subcommand*")
          (cmdline (thing-at-point 'commandline)))
      (if (get-buffer buffer-name)
          (kill-buffer buffer-name))
      (with-current-buffer (get-buffer-create buffer-name)
        (insert "running command:\n" cmdline "\n\n"))
  
      (async-shell-command cmdline buffer-name)
      ;(switch-to-buffer buffer-name)
      ))
  
  (global-set-key (kbd "M-@") 'shell-command-at-point)
#+END_SRC
* custom modeline
#+BEGIN_SRC emacs-lisp
  ;; http://amitp.blogspot.com/2011/08/emacs-custom-mode-line.html
  
  (defun shorten-directory (dir max-length)
    "Show up to `max-length' characters of a directory name `dir'."
    (let ((path (reverse (split-string (abbreviate-file-name dir) "/")))
          (output ""))
      (when (and path (equal "" (car path)))
        (setq path (cdr path)))
      (while (and path (< (length output) (- max-length 4)))
        (setq output (concat (car path) "/" output))
        (setq path (cdr path)))
      (when path
        (setq output (concat ".../" output)))
      output))
  
  (setq-default
   mode-line-format
   '(
     ;; line/col
     "%4l:%2c  "
  
     ;; dir + file name
     (:propertize (:eval (when (not (string-prefix-p "*" (buffer-name)))
                           (shorten-directory default-directory 30)))
                  face mode-line-directory-face)
     (:propertize "%b"
                  face mode-line-filename-face)
  
     ;; mod state
     (:eval (when (buffer-modified-p) "*"))
  
     "  "
  
     (vc-mode vc-mode)
  
     ;; major mode
     "[%m]"))
  
  (make-face 'mode-line-directory-face)
  (set-face-attribute 'mode-line-directory-face nil
                      :foreground "gray20")
  
  (make-face 'mode-line-filename-face)
  (set-face-attribute 'mode-line-filename-face nil
                      :weight 'bold)
#+END_SRC
